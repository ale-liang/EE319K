


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Zachary Chin and Alex Liang
    3 00000000         ; Date Created: 2/14/2017
    4 00000000         ; Last Modified: 3/3/2020
    5 00000000         ; You are given a simple stepper motor software system w
                       ith one input and
    6 00000000         ; four outputs. This program runs, but you are asked to 
                       add minimally intrusive
    7 00000000         ; debugging instruments to verify it is running properly
                       . 
    8 00000000         ; The system outputs in one of three modes:
    9 00000000         ; 1) cycles through 10,6,5,9,... at a constant rate
   10 00000000         ; 2) cycles through 5,6,10,9,... at a constant rate
   11 00000000         ; 3) does not change the output, but still outputs at a 
                       constant rate
   12 00000000         ; When PA4 goes high and low again, the system cycles th
                       rough these modes
   13 00000000         ; The output rate will be different on the simulator ver
                       sus the real board
   14 00000000         ;   Insert debugging instruments which gather data (stat
                       e and timing)
   15 00000000         ;   to verify that the system is functioning as expected
                       .
   16 00000000         ; Hardware connections (External: One button and four ou
                       tputs to stepper motor)
   17 00000000         ;  PA4 is Button input  (1 means pressed, 0 means not pr
                       essed)
   18 00000000         ;  PE3-0 are stepper motor outputs 
   19 00000000         ;  PF2 is Blue LED on Launchpad used as a heartbeat
   20 00000000         ; Instrumentation data to be gathered is as follows:
   21 00000000         ; After every output to Port E, collect one state and ti
                       me entry. 
   22 00000000         ; The state information is the 5 bits on Port A bit 4 an
                       d Port E PE3-0
   23 00000000         ;   place one 8-bit entry in your Data Buffer  
   24 00000000         ; The time information is the 24-bit time difference bet
                       ween this output and the previous (in 12.5ns units)
   25 00000000         ;   place one 32-bit entry in the Time Buffer
   26 00000000         ;    24-bit value of the SysTick's Current register (NVI
                       C_ST_CURRENT_R)
   27 00000000         ;    you must handle the roll over as Current goes 3,2,1
                       ,0,0x00FFFFFF,0xFFFFFE,
   28 00000000         ; Note: The size of both buffers is 100 entries. Once yo
                       u fill these
   29 00000000         ;       entries you should stop collecting data
   30 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   31 00000000         ; On each iteration of the main loop of your program tog
                       gle the 
   32 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   33 00000000         
   34 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   35 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   36 00000000 400043FC 



ARM Macro Assembler    Page 2 


                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   37 00000000 40004400 
                       GPIO_PORTA_DIR_R
                               EQU              0x40004400
   38 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
   39 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   40 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   41 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   42 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   43 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   44 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   45 00000000         ; RAM Area
   46 00000000                 AREA             DATA, ALIGN=2
   47 00000000 00 00 00 
              00       Index   SPACE            4           ; index into Steppe
                                                            r table 0,1,2,3
   48 00000004 00 00 00 
              00       Direction
                               SPACE            4           ; -1 for CCW, 0 for
                                                             stop 1 for CW
   49 00000008         
   50 00000008         ;place your debug variables in RAM here
   51 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       DataBuffer
                               SPACE            100
   52 0000006C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       TimeBuffer
                               SPACE            400
   53 000001FC 00 00 00 
              00       DataPt  SPACE            4
   54 00000200 00 00 00 
              00       TimePt  SPACE            4
   55 00000204 00 00 00 
                       prevTime
                               SPACE            3
   56 00000207        4 
                       count   RN               4
   57 00000207         
   58 00000207         ; ROM Area
   59 00000207                 IMPORT           TExaS_Init
   60 00000207                 IMPORT           SysTick_Init
   61 00000207         ;-UUU-Import routine(s) from other assembly files (like 
                       SysTick.s) here
   62 00000207                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   63 00000000                 THUMB
   64 00000000 05 06 0A 
              09       Stepper DCB              5,6,10,9
   65 00000004                 EXPORT           Start
   66 00000004         
   67 00000004         Start
   68 00000004         ; TExaS_Init sets bus clock at 80 MHz
   69 00000004         ; PA4, PE3-PE0 out logic analyzer to TExasDisplay
   70 00000004 4870            LDR              R0,=SendDataToLogicAnalyzer
   71 00000006 F040 0001       ORR              R0,R0,#1
   72 0000000A F7FF FFFE       BL               TExaS_Init  ; logic analyzer, 8
                                                            0 MHz



ARM Macro Assembler    Page 6 


   73 0000000E         ;place your initializations here
   74 0000000E F000 F823       BL               Stepper_Init ; initialize stepp
                                                            er motor
   75 00000012 F000 F83B       BL               Switch_Init ; initialize switch
                                                             input
   76 00000016 F000 F84B       BL               Heart_Init  ; initialize heart 
                                                            beat output
   77 0000001A         ;**********************
   78 0000001A F000 F876       BL               Debug_Init  ;(you write this)
   79 0000001E         ;**********************
   80 0000001E B662            CPSIE            I           ; TExaS logic analy
                                                            zer runs on interru
                                                            pts
   81 00000020 F04F 0500       MOV              R5,#0       ; last PA4
   82 00000024         loop
   83 00000024 F000 F869       BL               Heart_Beat
   84 00000028 4968            LDR              R1,=GPIO_PORTA_DATA_R
   85 0000002A 680C            LDR              R4,[R1]     ;current value of s
                                                            witch
   86 0000002C F004 0410       AND              R4,R4,#0x10 ; select just bit 4
                                                            
   87 00000030 2C00            CMP              R4,#0
   88 00000032 D00A            BEQ              no          ; skip if not pushe
                                                            d
   89 00000034 2D00            CMP              R5,#0
   90 00000036 D108            BNE              no          ; skip if pushed la
                                                            st time
   91 00000038         ; this time yes, last time no
   92 00000038 4965            LDR              R1,=Direction
   93 0000003A 6808            LDR              R0,[R1]     ; current direction
                                                            
   94 0000003C F100 0001       ADD              R0,R0,#1    ;-1,0,1 to 0,1,2
   95 00000040 2802            CMP              R0,#2
   96 00000042 D101            BNE              ok
   97 00000044 F04F 30FF       MOV              R0,#-1      ; cycles through va
                                                            lues -1,0,1
   98 00000048 6008    ok      STR              R0,[R1]     ; Direction=0 (CW) 
                                                             
   99 0000004A 4625    no      MOV              R5,R4       ; setup for next ti
                                                            me
  100 0000004C F000 F842       BL               Stepper_Step
  101 00000050 4860            LDR              R0,=1600000
  102 00000052 F000 F84F       BL               Wait        ; time delay fixed 
                                                            but not accurate   
                                                            
  103 00000056 E7E5            B                loop
  104 00000058         ;Initialize stepper motor interface
  105 00000058         Stepper_Init
  106 00000058 F04F 0001       MOV              R0,#1
  107 0000005C 495C            LDR              R1,=Direction
  108 0000005E 6008            STR              R0,[R1]     ; Direction=0 (CW)
  109 00000060 F04F 0000       MOV              R0,#0
  110 00000064 495C            LDR              R1,=Index
  111 00000066 6008            STR              R0,[R1]     ; Index=0
  112 00000068         ; activate clock for Port E
  113 00000068 495C            LDR              R1, =SYSCTL_RCGCGPIO_R
  114 0000006A 6808            LDR              R0, [R1]
  115 0000006C F040 0010       ORR              R0, R0, #0x10 ; Clock for E
  116 00000070 6008            STR              R0, [R1]



ARM Macro Assembler    Page 7 


  117 00000072 BF00            NOP
  118 00000074 BF00            NOP                          ; allow time to fin
                                                            ish activating
  119 00000076         ; set direction register
  120 00000076 495A            LDR              R1, =GPIO_PORTE_DIR_R
  121 00000078 6808            LDR              R0, [R1]
  122 0000007A F040 000F       ORR              R0, R0, #0x0F 
                                                            ; Output on PE0-PE3
                                                            
  123 0000007E 6008            STR              R0, [R1]
  124 00000080         ; enable digital port
  125 00000080 4958            LDR              R1, =GPIO_PORTE_DEN_R
  126 00000082 6808            LDR              R0, [R1]
  127 00000084 F040 000F       ORR              R0, R0, #0x0F ; enable PE3-0
  128 00000088 6008            STR              R0, [R1]
  129 0000008A 4770            BX               LR
  130 0000008C         
  131 0000008C         ;Initialize switch interface
  132 0000008C         Switch_Init
  133 0000008C         ; activate clock for Port A
  134 0000008C 4953            LDR              R1, =SYSCTL_RCGCGPIO_R
  135 0000008E 6808            LDR              R0, [R1]
  136 00000090 F040 0001       ORR              R0, R0, #0x01 ; Clock for A
  137 00000094 6008            STR              R0, [R1]
  138 00000096 BF00            NOP
  139 00000098 BF00            NOP                          ; allow time to fin
                                                            ish activating
  140 0000009A         ; set direction register
  141 0000009A 4953            LDR              R1, =GPIO_PORTA_DIR_R
  142 0000009C 6808            LDR              R0, [R1]
  143 0000009E F020 0010       BIC              R0, R0, #0x10 ; Input on PA4
  144 000000A2 6008            STR              R0, [R1]
  145 000000A4         ; 5) enable digital port
  146 000000A4 4951            LDR              R1, =GPIO_PORTA_DEN_R
  147 000000A6 6808            LDR              R0, [R1]
  148 000000A8 F040 0010       ORR              R0, R0, #0x10 ; enable PA4
  149 000000AC 6008            STR              R0, [R1]
  150 000000AE 4770            BX               LR
  151 000000B0         
  152 000000B0         ;Initialize heart beat in PF2
  153 000000B0         Heart_Init
  154 000000B0         ;Activate clock for Port F
  155 000000B0 494A            LDR              R1, =SYSCTL_RCGCGPIO_R
  156 000000B2 6808            LDR              R0, [R1]
  157 000000B4 F040 0020       ORR              R0, R0, #0x20 ; Clock for F
  158 000000B8 6008            STR              R0, [R1]
  159 000000BA BF00            NOP
  160 000000BC BF00            NOP                          ; allow time to fin
                                                            ish activating
  161 000000BE         ; set direction register
  162 000000BE 494C            LDR              R1, =GPIO_PORTF_DIR_R
  163 000000C0 6808            LDR              R0, [R1]
  164 000000C2 F040 0004       ORR              R0, R0, #0x04 ; Output on PF2
  165 000000C6 6008            STR              R0, [R1]
  166 000000C8         ; 5) enable digital port
  167 000000C8 494A            LDR              R1, =GPIO_PORTF_DEN_R
  168 000000CA 6808            LDR              R0, [R1]
  169 000000CC F040 0004       ORR              R0, R0, #0x04 ; enable PF2
  170 000000D0 6008            STR              R0, [R1]



ARM Macro Assembler    Page 8 


  171 000000D2 4770            BX               LR
  172 000000D4         
  173 000000D4         ; Step the motor clockwise
  174 000000D4         ; Direction determines the rotational direction
  175 000000D4         ; Input: None
  176 000000D4         ; Output: None
  177 000000D4         Stepper_Step
  178 000000D4 B510            PUSH             {R4,LR}
  179 000000D6 4940            LDR              R1,=Index
  180 000000D8 680A            LDR              R2,[R1]     ; old Index
  181 000000DA 4B3D            LDR              R3,=Direction
  182 000000DC 6818            LDR              R0,[R3]     ; -1 for CCW, 0 for
                                                             stop 1 for CW
  183 000000DE 4402            ADD              R2,R2,R0
  184 000000E0 F002 0203       AND              R2,R2,#3    ; 0,1,2,3,0,1,2,...
                                                            
  185 000000E4 600A            STR              R2,[R1]     ; new Index
  186 000000E6 4B44            LDR              R3,=Stepper ; table
  187 000000E8 5CD0            LDRB             R0,[R2,R3]  ; next output: 5,6,
                                                            10,9,5,6,10,...
  188 000000EA 4944            LDR              R1,=GPIO_PORTE_DATA_R 
                                                            ; change PE3-PE0
  189 000000EC 6008            STR              R0,[R1]
  190 000000EE F000 F82A       BL               Debug_Capture
  191 000000F2 BD10            POP              {R4,PC}
  192 000000F4         
  193 000000F4         ; inaccurate and inefficient time delay
  194 000000F4         Wait
  195 000000F4 1E40            SUBS             R0,R0,#1    ; outer loop
  196 000000F6 D1FD            BNE              Wait
  197 000000F8 4770            BX               LR
  198 000000FA         
  199 000000FA         ; subroutine to toggle Port F pin 2
  200 000000FA         ; input: none
  201 000000FA         ; output: none
  202 000000FA         Heart_Beat
  203 000000FA B403            PUSH             {R0-R1}     ;Save registers use
                                                            d
  204 000000FC 4840            LDR              R0, =GPIO_PORTF_DATA_R ;Grab th
                                                            e Port F data regis
                                                            ters
  205 000000FE 6801            LDR              R1, [R0]
  206 00000100 F081 0104       EOR              R1, #0x04   ;Toggle pin 2 and s
                                                            tore it back
  207 00000104 6001            STR              R1, [R0]
  208 00000106 BC03            POP              {R0-R1}     ;Restore registers
  209 00000108 4770            BX               LR
  210 0000010A         
  211 0000010A         ; Initializes the debugger
  212 0000010A         ; All registers saved and restored within
  213 0000010A         ; Input: None
  214 0000010A         ; Output: None
  215 0000010A         Debug_Init
  216 0000010A B51F            PUSH             {R0-R4,LR}  ;Save registers R0-
                                                            R4 and LR to stack
  217 0000010C         ; you write this
  218 0000010C 4A3D            LDR              R2, =DataBuffer ;R2 points to t
                                                            he start of the Dat
                                                            a Array



ARM Macro Assembler    Page 9 


  219 0000010E 4B3E            LDR              R3, =TimeBuffer ;R3 points to t
                                                            he start of the Tim
                                                            e Array
  220 00000110 F04F 0464       MOV              count, #100 ;count (R4) keeps t
                                                            rack of num spots i
                                                            nstantiated
  221 00000114 F04F 31FF       MOV              R1, #-1     ;R1 holds 0xFF/0xFF
                                                            FFFFFF to fill the 
                                                            arrays with
  222 00000118         deLoop                               ;This loop runs 100
                                                             times to fill all 
                                                            100 spots in both a
                                                            rrays 
  223 00000118 7011            STRB             R1, [R2]    ;Store 0xFF in the 
                                                            next spot in the da
                                                            ta buffer
  224 0000011A 6019            STR              R1, [R3]    ;Store 0xFFFFFFFF i
                                                            n the next spot in 
                                                            the time buffer
  225 0000011C F102 0201       ADD              R2, #1      ;Update R2 to point
                                                             to the next elemen
                                                            t (1 byte away)
  226 00000120 F103 0304       ADD              R3, #4      ;Update R3 to point
                                                             to the next elemen
                                                            t (4 bytes away)
  227 00000124 3C01            SUBS             count, #1   ;Decrement count by
                                                             1
  228 00000126 D1F7            BNE              deLoop      ;Check if we've rea
                                                            ched iteration #100
                                                            . Loop back if not
  229 00000128 4A36            LDR              R2, =DataBuffer ;R2 points back
                                                             to the start of th
                                                            e Data Array
  230 0000012A 4B37            LDR              R3, =TimeBuffer ;R3 points back
                                                             to the start of th
                                                            e Time Array
  231 0000012C 4837            LDR              R0, =DataPt ;R0 grabs the locat
                                                            ion DataPt 
  232 0000012E 4938            LDR              R1, =TimePt ;R1 grabs the locat
                                                            ion TimePt
  233 00000130 6002            STR              R2, [R0]    ;Store the start of
                                                             the Data Array in 
                                                            DataPt
  234 00000132 600B            STR              R3, [R1]    ;Store the start of
                                                             the Time Array in 
                                                            TimePt
  235 00000134 4837            LDR              R0, =prevTime ;Instantiate the 
                                                            previous capture ti
                                                            me to 0x00FFFFFF
  236 00000136 F04F 0100       MOV              R1, #0
  237 0000013A F061 417F       ORR              R1, #0x00FFFFFF
  238 0000013E 6001            STR              R1, [R0]    ;Store it back into
                                                             prevTime
  239 00000140 F7FF FFFE       BL               SysTick_Init ;Branch to initial
                                                            ize the SysTick
  240 00000144         
  241 00000144 BD1F            POP              {R0-R4,PC}  ;Reload registers p
                                                            ushed onto the stac
                                                            k



ARM Macro Assembler    Page 10 


  242 00000146         ;Don't need BX LR because we are popping the LR into the
                        PC
  243 00000146         
  244 00000146         ; Captures each data point and adds data and time to the
                       ir respective arrays
  245 00000146         ; All registers saved and restored within
  246 00000146         ; 30 Instructions, so ~60 cycles and 750ns
  247 00000146         ; In between Debug Captures: ~6,400,081 cycles and ~80,0
                       01,012.5ns
  248 00000146         ; Percentage of time to run debug capture = ~0.0000937%
  249 00000146         ; Input: None
  250 00000146         ; Output: None   
  251 00000146         Debug_Capture
  252 00000146 B57F            PUSH             {R0-R6,LR}  ;Save registers R0-
                                                            R6 and LR to stack
  253 00000148         ; you write this
  254 00000148 4B30            LDR              R3, =DataPt ;R3 grabs the posit
                                                            ion of DataPt 
  255 0000014A 681D            LDR              R5, [R3]    ;R5 holds the posit
                                                            ion of the next ele
                                                            ment added to Data 
                                                            Buffer
  256 0000014C 4C2D            LDR              R4, =DataBuffer ;R4 grabs the s
                                                            tart of the Data Bu
                                                            ffer
  257 0000014E F104 0464       ADD              R4, #100    ;Increment R4 by 10
                                                            0 to find the locat
                                                            ion directly after 
                                                            the buffer ends
  258 00000152 42A5            CMP              R5, R4      ;Check if the buffe
                                                            r is full (next ele
                                                            ment is past the en
                                                            d of the buffer)
  259 00000154 D01A            BEQ              ds_done     ;If full, branch to
                                                             the end
  260 00000156 481D            LDR              R0, =GPIO_PORTA_DATA_R ;R0 grab
                                                            s Port A's Data reg
                                                            ister
  261 00000158 7801            LDRB             R1, [R0]    ;R1 grabs the conte
                                                            nts of the Data reg
                                                            ister
  262 0000015A F001 0110       AND              R1, R1, #0x10 ;Mask the 4th bit
                                                             to grab the value 
                                                            of PA4
  263 0000015E 4827            LDR              R0, =GPIO_PORTE_DATA_R ;R0 grab
                                                            s Port E's Data reg
                                                            ister
  264 00000160 7804            LDRB             R4, [R0]    ;R4 grabs the conte
                                                            nts of the Data reg
                                                            ister
  265 00000162 F004 040F       AND              R4, R4, #0xF ;Mask bits 0-3 to 
                                                            grab the value of P
                                                            E0-PE3
  266 00000166 EA41 0404       ORR              R4, R1, R4  ;Or the two values 
                                                            together into one 5
                                                            -bit value (5, 6, A
                                                            , 9)
  267 0000016A 702C            STRB             R4, [R5]    ;Store that value i
                                                            nto the next spot i



ARM Macro Assembler    Page 11 


                                                            n Data Buffer
  268 0000016C F105 0501       ADD              R5, #1      ;Increment the Data
                                                            Pt so it points to 
                                                            the new next positi
                                                            on
  269 00000170 601D            STR              R5, [R3]    ;Store it into Data
                                                            Pt
  270 00000172         
  271 00000172 4B27            LDR              R3, =TimePt ;R3 grabs the posit
                                                            ion of TimePt
  272 00000174 681D            LDR              R5, [R3]    ;R5 grabs the posit
                                                            ion of the next ele
                                                            ment added to Time 
                                                            Buffer
  273 00000176 4928            LDR              R1, =NVIC_ST_CURRENT_R ;R1 poin
                                                            ts to the systick c
                                                            urrent register
  274 00000178 6809            LDR              R1, [R1]    ;Grab the current v
                                                            alue of the systick
                                                             current register
  275 0000017A 4A26            LDR              R2, =prevTime ;R2 points to the
                                                             storage point of t
                                                            he previous time 
  276 0000017C 6810            LDR              R0, [R2]    ;R0 holds the previ
                                                            ous time (0xFFFFFF 
                                                            if first time)
  277 0000017E F000 F807       BL               sub24       ;Calls sub24 to do 
                                                            24-bit subtraction 
                                                            (prev - current)
  278 00000182 6011            STR              R1, [R2]    ;Store the current 
                                                            time into prevTime
  279 00000184 6028            STR              R0, [R5]    ;Stores the differe
                                                            nce into the Time B
                                                            uffer
  280 00000186 F105 0504       ADD              R5, #4      ;Increment TimePt b
                                                            y 4 (to the next 32
                                                            -bit element)
  281 0000018A 601D            STR              R5, [R3]    ;Store it back into
                                                             TimePt
  282 0000018C         
  283 0000018C         ds_done
  284 0000018C BD7F            POP              {R0-R6,PC}  ;Restore the regist
                                                            ers
  285 0000018E 4770            BX               LR
  286 00000190         
  287 00000190         ; Takes 2 inputs (R0 and R1) and subtracts them
  288 00000190         ; Returns the difference
  289 00000190         sub24
  290 00000190 B406            PUSH             {R1, R2}
  291 00000192 4288            CMP              R0, R1
  292 00000194 D208            BHS              normal
  293 00000196 F04F 0200       MOV              R2, #0
  294 0000019A F042 7280       ORR              R2, #0x01000000
  295 0000019E EBA1 0100       SUB              R1, R0
  296 000001A2 EBA2 0001       SUB              R0, R2, R1
  297 000001A6 E001            B                exit24
  298 000001A8         normal
  299 000001A8 EBA0 0001       SUB              R0, R0, R1
  300 000001AC         exit24



ARM Macro Assembler    Page 12 


  301 000001AC BC06            POP              {R1, R2}
  302 000001AE 4770            BX               LR
  303 000001B0         
  304 000001B0         ; edit the following only if you need to move pins from 
                       PA4, PE3-0      
  305 000001B0         ; logic analyzer on the real board
  306 000001B0 40004040 
                       PA4     equ              0x40004040  ; bit-specific addr
                                                            essing
  307 000001B0 4002403C 
                       PE30    equ              0x4002403C  ; bit-specific addr
                                                            essing
  308 000001B0 4000C000 
                       UART0_DR_R
                               equ              0x4000C000  ;write to this to s
                                                            end data
  309 000001B0         SendDataToLogicAnalyzer
  310 000001B0 491A            LDR              R1,=PA4
  311 000001B2 6809            LDR              R1,[R1]     ; read PA4
  312 000001B4 481A            LDR              R0,=PE30    ; read PE3-PE0
  313 000001B6 6800            LDR              R0,[R0]
  314 000001B8 EA40 0001       ORR              R0,R0,R1    ;combine into one 5
                                                            -bit value
  315 000001BC F040 0080       ORR              R0,R0,#0x80 ;bit7=1 means digit
                                                            al data
  316 000001C0 4918            LDR              R1,=UART0_DR_R
  317 000001C2 6008            STR              R0,[R1]     ; send data at 10 k
                                                            Hz
  318 000001C4 4770            BX               LR
  319 000001C6         
  320 000001C6         
  321 000001C6 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  322 000001C8                 END                          ; end of file
              00000000 
              400043FC 
              00000000 
              00186A00 
              00000000 
              400FE608 
              40024400 
              4002451C 
              40004400 
              4000451C 
              40025400 
              4002551C 
              00000000 
              400243FC 
              400253FC 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E000E018 
              40004040 
              4002403C 
              4000C000 



ARM Macro Assembler    Page 13 


Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_Lab4 -IC:\Users\iiale\AppData\Local\A
rm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\iiale\AppData\Local\Arm\
Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --
predefine="__UVISION_VERSION SETA 529" --predefine="_RTE_ SETA 1" --predefine="
TM4C123GH6PM SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: DATA unused
DataBuffer 00000008

Symbol: DataBuffer
   Definitions
      At line 51 in file main.s
   Uses
      At line 218 in file main.s
      At line 229 in file main.s
      At line 256 in file main.s

DataPt 000001FC

Symbol: DataPt
   Definitions
      At line 53 in file main.s
   Uses
      At line 231 in file main.s
      At line 254 in file main.s

Direction 00000004

Symbol: Direction
   Definitions
      At line 48 in file main.s
   Uses
      At line 92 in file main.s
      At line 107 in file main.s
      At line 181 in file main.s

Index 00000000

Symbol: Index
   Definitions
      At line 47 in file main.s
   Uses
      At line 110 in file main.s
      At line 179 in file main.s

TimeBuffer 0000006C

Symbol: TimeBuffer
   Definitions
      At line 52 in file main.s
   Uses
      At line 219 in file main.s
      At line 230 in file main.s

TimePt 00000200

Symbol: TimePt
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 54 in file main.s
   Uses
      At line 232 in file main.s
      At line 271 in file main.s

prevTime 00000204

Symbol: prevTime
   Definitions
      At line 55 in file main.s
   Uses
      At line 235 in file main.s
      At line 275 in file main.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 62 in file main.s
   Uses
      None
Comment: .text unused
Debug_Capture 00000146

Symbol: Debug_Capture
   Definitions
      At line 251 in file main.s
   Uses
      At line 190 in file main.s
Comment: Debug_Capture used once
Debug_Init 0000010A

Symbol: Debug_Init
   Definitions
      At line 215 in file main.s
   Uses
      At line 78 in file main.s
Comment: Debug_Init used once
Heart_Beat 000000FA

Symbol: Heart_Beat
   Definitions
      At line 202 in file main.s
   Uses
      At line 83 in file main.s
Comment: Heart_Beat used once
Heart_Init 000000B0

Symbol: Heart_Init
   Definitions
      At line 153 in file main.s
   Uses
      At line 76 in file main.s
Comment: Heart_Init used once
SendDataToLogicAnalyzer 000001B0

Symbol: SendDataToLogicAnalyzer
   Definitions
      At line 309 in file main.s
   Uses
      At line 70 in file main.s
Comment: SendDataToLogicAnalyzer used once
Start 00000004

Symbol: Start
   Definitions
      At line 67 in file main.s
   Uses
      At line 65 in file main.s
Comment: Start used once
Stepper 00000000

Symbol: Stepper



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 64 in file main.s
   Uses
      At line 186 in file main.s
Comment: Stepper used once
Stepper_Init 00000058

Symbol: Stepper_Init
   Definitions
      At line 105 in file main.s
   Uses
      At line 74 in file main.s
Comment: Stepper_Init used once
Stepper_Step 000000D4

Symbol: Stepper_Step
   Definitions
      At line 177 in file main.s
   Uses
      At line 100 in file main.s
Comment: Stepper_Step used once
Switch_Init 0000008C

Symbol: Switch_Init
   Definitions
      At line 132 in file main.s
   Uses
      At line 75 in file main.s
Comment: Switch_Init used once
Wait 000000F4

Symbol: Wait
   Definitions
      At line 194 in file main.s
   Uses
      At line 102 in file main.s
      At line 196 in file main.s

deLoop 00000118

Symbol: deLoop
   Definitions
      At line 222 in file main.s
   Uses
      At line 228 in file main.s
Comment: deLoop used once
ds_done 0000018C

Symbol: ds_done
   Definitions
      At line 283 in file main.s
   Uses
      At line 259 in file main.s
Comment: ds_done used once
exit24 000001AC

Symbol: exit24
   Definitions
      At line 300 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 297 in file main.s
Comment: exit24 used once
loop 00000024

Symbol: loop
   Definitions
      At line 82 in file main.s
   Uses
      At line 103 in file main.s
Comment: loop used once
no 0000004A

Symbol: no
   Definitions
      At line 99 in file main.s
   Uses
      At line 88 in file main.s
      At line 90 in file main.s

normal 000001A8

Symbol: normal
   Definitions
      At line 298 in file main.s
   Uses
      At line 292 in file main.s
Comment: normal used once
ok 00000048

Symbol: ok
   Definitions
      At line 98 in file main.s
   Uses
      At line 96 in file main.s
Comment: ok used once
sub24 00000190

Symbol: sub24
   Definitions
      At line 289 in file main.s
   Uses
      At line 277 in file main.s
Comment: sub24 used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 84 in file main.s
      At line 260 in file main.s

GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 146 in file main.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_DIR_R 40004400

Symbol: GPIO_PORTA_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 141 in file main.s
Comment: GPIO_PORTA_DIR_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 188 in file main.s
      At line 263 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 125 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 120 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 204 in file main.s
Comment: GPIO_PORTF_DATA_R used once
GPIO_PORTF_DEN_R 4002551C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 167 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 43 in file main.s
   Uses
      At line 162 in file main.s
Comment: GPIO_PORTF_DIR_R used once
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 273 in file main.s
Comment: NVIC_ST_CURRENT_R used once
PA4 40004040

Symbol: PA4
   Definitions
      At line 306 in file main.s
   Uses
      At line 310 in file main.s
Comment: PA4 used once
PE30 4002403C

Symbol: PE30
   Definitions
      At line 307 in file main.s
   Uses
      At line 312 in file main.s
Comment: PE30 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 113 in file main.s
      At line 134 in file main.s
      At line 155 in file main.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 308 in file main.s
   Uses
      At line 316 in file main.s
Comment: UART0_DR_R used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 60 in file main.s
   Uses
      At line 239 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 59 in file main.s
   Uses
      At line 72 in file main.s
Comment: TExaS_Init used once
2 symbols
381 symbols in table
